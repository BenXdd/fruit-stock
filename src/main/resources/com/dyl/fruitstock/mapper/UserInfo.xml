<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dyl.fruitstock.mapper.UserInfoMapper">

    <resultMap type="com.dyl.fruitstock.entity.UserInfo" id="userInfoResultMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="userName" column="user_name" jdbcType="VARCHAR"/>
        <result property="userPassword" column="user_password" jdbcType="VARCHAR"/>
        <result property="userState" column="user_state" jdbcType="INTEGER"/>
        <result property="phone" column="phone" jdbcType="VARCHAR"/>
        <result property="email" column="email" jdbcType="VARCHAR"/>
        <result property="gender" column="gender" jdbcType="VARCHAR"/>
        <result property="createTime" column="create_time" jdbcType="INTEGER"/>
        <result property="updateTime" column="update_time" jdbcType="INTEGER"/>
        <result property="lastLoginTime" column="last_login_time" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="userInfoBaseColumn">
        t.`id`,
        t.`user_name`,
        t.`user_password`,
        t.`user_state`,
        t.`phone`,
        t.`email`,
        t.`gender`,
        t.`create_time`,
        t.`update_time`,
        t.`last_login_time`

    </sql>

    <!--查询单个-->
    <select id="selectById" resultMap="userInfoResultMap">
        SELECT
        <include refid="userInfoBaseColumn"/>
        FROM `user_info` t
        WHERE t.`id` = #{id}
        
    </select>

    <select id="selectByIds" resultMap="userInfoResultMap">
        SELECT
        <include refid="userInfoBaseColumn"/>
        FROM `user_info` t
        WHERE t.`id` in (<foreach collection="list" index="index" item="item" separator=",">#{item}</foreach>)
        
    </select>

    <update id="updateById" parameterType="com.dyl.fruitstock.entity.UserInfo">
        UPDATE `user_info`
        <set>
            <if test="userName != null and userName != ''">
                `user_name` = #{userName},
            </if>
            <if test="userPassword != null and userPassword != ''">
                `user_password` = #{userPassword},
            </if>
            <if test="userState != null">
                `user_state` = #{userState},
            </if>
            <if test="phone != null and phone != ''">
                `phone` = #{phone},
            </if>
            <if test="email != null and email != ''">
                `email` = #{email},
            </if>
            <if test="gender != null and gender != ''">
                `gender` = #{gender},
            </if>
            <if test="createTime != null">
                `create_time` = #{createTime},
            </if>
            <if test="updateTime != null">
                `update_time` = #{updateTime},
            </if>
            <if test="lastLoginTime != null">
                `last_login_time` = #{lastLoginTime},
            </if>
        </set>
        WHERE `id` = #{id}
    </update>


    <sql id="userInfoQueryCondition">
            <if test="q.userName != null and q.userName != ''">
               AND t.`user_name` = #{q.userName}
            </if>
            <if test="q.userPassword != null and q.userPassword != ''">
               AND t.`user_password` = #{q.userPassword}
            </if>
            <if test="q.userState != null">
               AND t.`user_state` = #{q.userState}
            </if>
            <if test="q.phone != null and q.phone != ''">
               AND t.`phone` = #{q.phone}
            </if>
            <if test="q.email != null and q.email != ''">
               AND t.`email` = #{q.email}
            </if>
            <if test="q.gender != null and q.gender != ''">
               AND t.`gender` = #{q.gender}
            </if>
            <if test="q.createTime != null">
               AND t.`create_time` = #{q.createTime}
            </if>
            <if test="q.updateTime != null">
               AND t.`update_time` = #{q.updateTime}
            </if>
            <if test="q.lastLoginTime != null">
               AND t.`last_login_time` = #{q.lastLoginTime}
            </if>

    </sql>

    <!--通过实体作为筛选条件查询-->
    <select id="selectOne" resultMap="userInfoResultMap">
        SELECT
        <include refid="userInfoBaseColumn"/>
        FROM `user_info` t
        <where>
            <include refid="userInfoQueryCondition"/>
        </where>
        LIMIT 1
    </select>
    
    <select id="select" resultMap="userInfoResultMap">
        SELECT
        <include refid="userInfoBaseColumn"/>
        FROM `user_info` t
        <where>
            <include refid="userInfoQueryCondition"/>
        </where>
    </select>
    
    <!--新增所有列-->
    <insert id="insert" keyProperty="id" useGeneratedKeys="true">
        insert into `user_info`(
            `user_name`,
            `user_password`,
            `user_state`,
            `phone`,
            `email`,
            `gender`,
            `create_time`,
            `update_time`,
            `last_login_time`
        ) VALUES (
        #{userName},
        #{userPassword},
        #{userState},
        #{phone},
        #{email},
        #{gender},
        #{createTime},
        #{updateTime},
        #{lastLoginTime}
        )
    </insert>

    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into `user_info`(
            `user_name`,
            `user_password`,
            `user_state`,
            `phone`,
            `email`,
            `gender`,
            `create_time`,
            `update_time`,
            `last_login_time`
        ) VALUES
        <foreach collection="list" index="index" item="item" separator=",">
        (
                #{item.userName},
                #{item.userPassword},
                #{item.userState},
                #{item.phone},
                #{item.email},
                #{item.gender},
                #{item.createTime},
                #{item.updateTime},
                #{item.lastLoginTime}
        )
        </foreach>
    </insert>
    
    <!--新增or更新-->
    <insert id="insertOrUpdate" keyProperty="id" useGeneratedKeys="true">
        insert into `user_info`(
            `user_name`,
            `user_password`,
            `user_state`,
            `phone`,
            `email`,
            `gender`,
            `create_time`,
            `update_time`,
            `last_login_time`
        ) VALUES (
        #{userName},
        #{userPassword},
        #{userState},
        #{phone},
        #{email},
        #{gender},
        #{createTime},
        #{updateTime},
        #{lastLoginTime}
        )
    on duplicate key update
    user_name = values(user_name),
    user_password = values(user_password),
    user_state = values(user_state),
    phone = values(phone),
    email = values(email),
    gender = values(gender),
    create_time = values(create_time),
    update_time = values(update_time),
    last_login_time = values(last_login_time)
    </insert>
    
    

</mapper>
